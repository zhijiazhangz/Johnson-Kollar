tt:=Sort(t);
//tt is the full list
rem:=[ 1224, 1323, 1378, 1410, 1420, 1448, 1520, 1527, 1606, 1626, 1649, 1724, 1757, 
1764, 1778, 1779, 1780, 1783, 1826, 1844, 1846, 1851, 1856, 1877, 1885, 1911, 
1912, 1950, 1953, 1956, 1967, 1973, 1975, 1982, 1983, 1989, 2009, 2013, 2014, 
2015, 2023, 2035, 2037, 2039, 2057, 2061, 2068, 2074, 2075, 2083, 2085, 2087, 
2088, 2098, 2099, 2101, 2102, 2104, 2105, 2108, 2111, 2113, 2119, 2123, 2138, 
2164, 2166, 2169, 2171, 2197, 2198, 2204, 2205, 2212, 2231, 2232, 2234, 2242, 
2252, 2253, 2255, 2260, 2261, 2262, 2265, 2268, 2274, 2278, 2285, 2297, 2298, 
2303, 2306, 2307, 2311, 2313, 2318, 2323, 2326, 2328, 2329, 2330, 2353, 2359, 
2363, 2364, 2375, 2376, 2380, 2387, 2388, 2393, 2399, 2400, 2414, 2431, 2451, 
2464, 2466, 2476, 2482, 2493, 2496, 2498, 2513, 2514, 2516, 2521, 2525, 2526, 
2533, 2572, 2582, 2585, 2587, 2592, 2600, 2601, 2604, 2605, 2617, 2619, 2623, 
2632, 2633, 2639, 2649, 2650, 2652, 2663, 2666, 2670, 2671, 2687, 2689, 2715, 
2717, 2722, 2723, 2727, 2734, 2736, 2741, 2742, 2743, 2744, 2746, 2754, 2755, 
2757, 2759, 2764, 2766, 2772, 2789, 2794, 2795, 2803, 2816, 2819, 2820, 2825, 
2834, 2835, 2838, 2839, 2846, 2847, 2849, 2850, 2851, 2852, 2853, 2860, 2861, 
2862, 2865, 2869, 2870, 2873, 2874, 2880, 2881, 2883, 2888, 2890, 2892, 2899, 
2902, 2904, 2905, 2908, 2909, 2916, 2918, 2926, 2928, 2943, 2944, 2969, 2970, 
2971, 2977, 2983, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 3006, 
3007, 3030, 3039, 3040, 3045, 3047, 3051, 3052, 3057, 3058, 3061, 3071, 3080, 
3082, 3088, 3094, 3095, 3104, 3106, 3107, 3114, 3123, 3129, 3130, 3136, 3137, 
3146, 3147, 3148, 3151, 3153, 3154, 3156, 3157, 3159, 3164, 3165, 3167, 3180, 
3187, 3190, 3192, 3197, 3202, 3211, 3212, 3220, 3223, 3231, 3233, 3234, 3236, 
3239, 3240, 3242, 3243, 3244, 3248, 3249, 3250, 3252, 3259, 3261, 3268, 3272, 
3274, 3275, 3277, 3290, 3293, 3295, 3301, 3303, 3305, 3307, 3309, 3313, 3320, 
3324, 3330, 3331, 3337, 3338, 3340, 3342, 3350, 3354, 3355, 3357, 3360, 3362, 
3363, 3367, 3368, 3371, 3373, 3377, 3380, 3381, 3383, 3385, 3386, 3388, 3395, 
3399, 3408, 3417, 3419, 3422, 3425, 3430, 3447, 3450, 3452, 3454, 3458, 3473, 
3474, 3478, 3480, 3487, 3496, 3498, 3501, 3504, 3515, 3517, 3518, 3524, 3527, 
3529, 3533, 3537, 3546, 3548, 3556, 3558, 3560, 3566, 3576, 3584, 3588, 3594, 
3595, 3600, 3607, 3608, 3610, 3615, 3619, 3621, 3622, 3634, 3651, 3655, 3656, 
3658, 3663, 3667, 3668, 3673, 3675, 3677, 3678, 3684, 3687, 3693, 3701, 3702, 
3709, 3724, 3726, 3745, 3750, 3752, 3762, 3765, 3770, 3772, 3775, 3785, 3796, 
3801, 3802, 3805, 3810, 3814, 3815, 3818, 3820, 3834, 3837, 3838, 3844, 3847, 
3850, 3854, 3867, 3872, 3873, 3879, 3880, 3882, 3883, 3884, 3885, 3902, 3905, 
3915, 3917, 3919, 3928, 3932, 3933, 3943, 3951, 3952, 3954, 3955, 3988, 3996, 
3997, 3999, 4016, 4017, 4020, 4038, 4039, 4040, 4050, 4053, 4056, 4065, 4155 ];
res:=<>;
notpolytope:=[];
maybe:=[];
for iy in notpolytope do 

weights:=tt[iy];

success := false;
T := Cputime();
deg := &+weights-1;
KK<[va]>:=FunctionField(Rationals(),1000);
usevar:=0;
P := PolynomialRing(KK,weights);
mon := MonomialsOfWeightedDegree(P,deg);
PP := WeightedProjectiveSpace(Rationals(),weights);
RR:=Rays(PP);
mm:=Transpose(Matrix(Rationals(),RR));
change:=AssociativeArray();

for x in [1..5] do 
	change[x]:=P.x;
	addmon:=MonomialsOfWeightedDegree(P,weights[x]); 
	for y in addmon do 
		if y ne P.x then usevar+:=1;change[x]+:=KK.usevar*y;end if;
	end for;
end for;

mp:=hom<P->P|[change[i]:i in [1..5]]>;
generalpol:=0;
for i in [1..#mon] do 
	usevar+:=1;
generalpol+:=KK.usevar*mon[i];
end for;

newpol:=mp(generalpol);
monnewpol:=Monomials(newpol);
coenewpol:=Coefficients(newpol);
monold:=Monomials(generalpol);
coeold:=Coefficients(generalpol);
exp := deg div weights[1]; 
if deg mod weights[1] eq 0 then
tordiv := [exp,0,0,0,0];
else
remainder := [j:j in [2 .. 5] | (deg - weights[j]) mod weights[1] eq 0];
other := remainder[1];
tordiv := [(deg-weights[other])/weights[1],0,0,0,0];
tordiv[other] := 1;
end if;
PP := WeightedProjectiveSpace(Rationals(),weights);
OD := Divisor(PP,tordiv); //Weil divisor which is section of O(D)
Q := RiemannRochPolytope(OD);
pointsall := [point: point in Points(Q)];
for j in [1..#pointsall] do 
points:=[pointsall[i]:i in [1..#pointsall]|i ne j];
a := points[1];
differences := [p - a: p in points];
vec := [];
const := [];
for b in differences do
Append(~vec,b);
Append(~const,0);
Append(~vec,-b);
Append(~const,-1);
end for;
SolutionSpace := PolyhedronWithInequalities(vec,const);
//SolutionSpace;
//iy;#Points(SolutionSpace);

if IsPolytope(SolutionSpace) and #Points(SolutionSpace) gt 1 then
//solutions := [point: point in Points(SolutionSpace) | point ne (Ambient(SolutionSpace) ! [0,0,0,0])];
dropvec:=Vector(pointsall[j])*mm+Vector(tordiv);
//print j ;
dropmon:=&*[(P.i)^(Integers()!(Eltseq(dropvec))[i]):i in [1..5]];
//dropmon;
if coeold[Position(monold,dropmon)] ne coenewpol[Position(monnewpol,dropmon)] then 
iy;Append(~maybe,<iy,dropmon,weights,deg,mon>); continue iy;
end if;
end if;
end for;
end for;



//this is the remaining cases
after:=<1378, 1527, 1606, 1626, 1649, 1724, 1778, 1779, 1780, 1783, 1826, 1844, 1846, 
1851, 1856, 1877, 1885, 1911, 1912, 1950, 1956, 1973, 1975, 1982, 1989, 2009, 
2013, 2014, 2015, 2023, 2035, 2037, 2039, 2057, 2061, 2074, 2075, 2083, 2087, 
2088, 2098, 2099, 2102, 2104, 2105, 2108, 2113, 2166, 2171, 2197, 2198, 2204, 
2205, 2212, 2231, 2232, 2234, 2253, 2255, 2260, 2261, 2262, 2265, 2285, 2298, 
2303, 2306, 2307, 2311, 2313, 2318, 2323, 2326, 2328, 2329, 2330, 2353, 2359, 
2363, 2364, 2375, 2376, 2380, 2387, 2388, 2393, 2399, 2400, 2414, 2431, 2451, 
2466, 2476, 2482, 2493, 2496, 2513, 2514, 2521, 2525, 2526, 2533, 2572, 2582, 
2585, 2587, 2592, 2600, 2601, 2604, 2605, 2617, 2619, 2623, 2632, 2633, 2639, 
2649, 2650, 2652, 2663, 2666, 2670, 2671, 2689, 2715, 2717, 2722, 2723, 2727, 
2734, 2741, 2742, 2743, 2744, 2746, 2754, 2755, 2757, 2759, 2764, 2766, 2772, 
2789, 2794, 2795, 2803, 2816, 2819, 2820, 2825, 2834, 2838, 2839, 2846, 2847, 
2849, 2850, 2851, 2853, 2861, 2862, 2865, 2870, 2874, 2880, 2881, 2883, 2890, 
2892, 2899, 2902, 2904, 2909, 2916, 2918, 2926, 2928, 2943, 2944, 2969, 2970, 
2971, 2977, 2983, 2985, 2986, 2987, 2989, 2990, 2991, 2993, 3007, 3039, 3040, 
3045, 3047, 3051, 3052, 3057, 3058, 3061, 3071, 3080, 3082, 3106, 3107, 3123, 
3129, 3130, 3137, 3146, 3147, 3148, 3156, 3157, 3159, 3164, 3165, 3167, 3180, 
3187, 3190, 3192, 3202, 3211, 3212, 3220, 3223, 3231, 3233, 3236, 3239, 3240, 
3244, 3248, 3249, 3261, 3268, 3272, 3275, 3277, 3290, 3293, 3295, 3301, 3305, 
3307, 3309, 3313, 3320, 3324, 3330, 3331, 3338, 3355, 3357, 3360, 3362, 3363, 
3367, 3368, 3377, 3381, 3395, 3399, 3408, 3417, 3419, 3422, 3425, 3458, 3473, 
3474, 3478, 3480, 3487, 3496, 3501, 3515, 3517, 3527, 3529, 3533, 3548, 3556, 
3558, 3560, 3566, 3576, 3584, 3607, 3615, 3634, 3667, 3668, 3673, 3675, 3677, 
3678, 3684, 3687, 3693, 3702, 3709, 3724, 3726, 3745, 3752, 3762, 3775, 3796, 
3802, 3818, 3820, 3837, 3838, 3847, 3850, 3854, 3872, 3873, 3880, 3883, 3884, 
3885, 3902, 3951, 3952, 3954, 3955, 3988, 3996, 3997, 3999, 4016, 4017, 4038, 
4039, 4040, 4053, 4056, 4065, 4155>;



//Now the following is checking with 2 points removed 


for iy in after do 

weights:=tt[iy];

success := false;
T := Cputime();
deg := &+weights-1;
K<[cof]>:=FunctionField(Rationals(),1000);
KK<[va]>:=PolynomialRing(K,1000);
usevar:=0;
P := PolynomialRing(KK,weights);
mon := MonomialsOfWeightedDegree(P,deg);
PP := WeightedProjectiveSpace(Rationals(),weights);
RR:=Rays(PP);
mm:=Transpose(Matrix(Rationals(),RR));
change:=AssociativeArray();

for x in [1..5] do 
	change[x]:=P.x;
	addmon:=MonomialsOfWeightedDegree(P,weights[x]); 
	for y in addmon do 
		if y ne P.x then usevar+:=1;change[x]+:=KK.usevar*y;end if;
	end for;
end for;

mp:=hom<P->P|[change[i]:i in [1..5]]>;


generalpol:=0;
usevarK:=0;
for i in [1..#mon] do 
	usevarK+:=1;
	generalpol+:=K.usevarK*mon[i];
end for;
Asp:=AffineSpace(K,usevarK);
AAp:=CoordinateRing(Asp);
adtmp:=hom<KK->AAp|[AAp.i:i in [1..usevarK]] cat [1:i in [usevarK+1..1000]]>;

newpol:=mp(generalpol);
monnewpol:=Monomials(newpol);
coenewpol:=Coefficients(newpol);
monold:=Monomials(generalpol);
coeold:=Coefficients(generalpol);
exp := deg div weights[1]; 
if deg mod weights[1] eq 0 then
tordiv := [exp,0,0,0,0];
else
remainder := [j:j in [2 .. 5] | (deg - weights[j]) mod weights[1] eq 0];
other := remainder[1];
tordiv := [(deg-weights[other])/weights[1],0,0,0,0];
tordiv[other] := 1;
end if;
PP := WeightedProjectiveSpace(Rationals(),weights);
OD := Divisor(PP,tordiv); //Weil divisor which is section of O(D)
Q := RiemannRochPolytope(OD);
pointsall := [point: point in Points(Q)];
for leaving in [2] do 
ch:=choose(#pointsall,leaving);
for poss in ch do 
points:=[pointsall[i]:i in [1..#pointsall]|not i in poss];
a := points[1];
differences := [p - a: p in points];
vec := [];
const := [];
for b in differences do
Append(~vec,b);
Append(~const,0);
Append(~vec,-b);
Append(~const,-1);
end for;
SolutionSpace := PolyhedronWithInequalities(vec,const);
//SolutionSpace;
//iy;#Points(SolutionSpace);

if not IsPolytope(SolutionSpace) or (IsPolytope(SolutionSpace) and #Points(SolutionSpace) gt 1) then
//solutions := [point: point in Points(SolutionSpace) | point ne (Ambient(SolutionSpace) ! [0,0,0,0])];
dropvec:=[Vector((pointsall[jj]))*mm+Vector(tordiv):jj in poss];
//print poss ;
dropmon:=[&*[(P.i)^(Integers()!(Eltseq(dropvec[jj]))[i]):i in [1..5]]:jj in [1..#dropvec]];
//dropmon;
rell:=[];
for tocancel in dropmon do 
	Append(~rell,coenewpol[Position(monnewpol,tocancel)]);
end for;
solscheme:=Scheme(Asp,[adtmp(x):x in rell]);
if Dimension(solscheme) ne -1 then <leaving, iy>;continue iy;end if;
//if coeold[Position(monold,dropmon)] ne coenewpol[Position(monnewpol,dropmon)] then 
//iy;Append(~maybe,<iy,dropmon,weights,deg,mon>); continue iy;
//end if;
end if;
end for;
end for;
iy;
end for;
//Here are the extra cases this found
two:=[2260,
2476,
2587,
2619,
2734,
2794,
2890,
3180];
